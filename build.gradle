buildscript {
	ext {
		springBootVersion = '3.4.3'
		spotlessVersion = '7.0.2'
		palantirVersion = '2.9.0'
	}
	repositories {
		mavenCentral()
		gradlePluginPortal()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("com.diffplug.gradle.spotless:com.diffplug.gradle.spotless.gradle.plugin:${spotlessVersion}")
		classpath("com.palantir.javaformat:gradle-palantir-java-format:${palantirVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.diffplug.spotless'

group = 'org.example'
version = '0.0.0.1-SNAPSHOT'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation platform('org.junit:junit-bom:5.10.0')
	testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
	useJUnitPlatform()
}

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore'
		// define the steps to apply to those files
		trimTrailingWhitespace()
		leadingSpacesToTabs() // or leadingTabsToSpaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		importOrder()
		removeUnusedImports()
		palantirJavaFormat()   // has its own section below
		licenseHeader '/* igprad - (C) $YEAR */' // or licenseHeaderFile
	}
}
